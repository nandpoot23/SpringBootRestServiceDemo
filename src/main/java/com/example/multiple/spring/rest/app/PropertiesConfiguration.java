package com.example.multiple.spring.rest.app;

import java.util.Properties;

import javax.sql.DataSource;

import org.apache.commons.lang.StringUtils;
import org.hibernate.SessionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.orm.hibernate4.HibernateTransactionManager;
import org.springframework.orm.hibernate4.LocalSessionFactoryBuilder;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.example.multiple.spring.rest.dao.CsDatabaseConnector;
import com.example.multiple.spring.rest.dao.DmDatabaseConnector;
import com.example.multiple.spring.rest.types.CustomerHDetails;

/**
 * This is the standard way to use the JDBC template to connect MySQL DM DB
 * Configuration which is primary database because of @primary annotation.
 * 
 * @author mlahariya
 * @version 1.0, Dec 2016
 */

@Configuration
@EnableTransactionManagement
public class PropertiesConfiguration {

    private static final Logger LOG = LoggerFactory.getLogger(PropertiesConfiguration.class);

    @Autowired
    private Environment env;

    @Bean(name = { "dmDataSource" })
    @ConfigurationProperties(prefix = "datasource.dm")
    @Primary
    public DataSource dmDataSource() {
        return DataSourceBuilder.create().build();
    }

    @Bean(name = "dmJdbcTemplate")
    public JdbcOperations dmJdbcTemplate(@Qualifier("dmDataSource") DataSource ds) {
        LOG.info("\n\n\n\n jdbcTeamplatedm BEAN " + ds + " \n\n\n");
        JdbcTemplate jdbcTemplate = new JdbcTemplate(ds);
        jdbcTemplate.setFetchSize(propInt("Default.fetchSize", 200));
        return jdbcTemplate;
    }

    @Bean(name = "dmDao")
    @Autowired
    public DmDatabaseConnector dmDao(@Qualifier("dmJdbcTemplate") JdbcOperations jop) {
        DmDatabaseConnector obj = new DmDatabaseConnector();
        obj.setJdbcTemplate(jop);
        try {
            obj.getJdbcTemplate().execute("select 1 from dual");
            LOG.info("DmDatabaseConnector Database sucessfully connected. ");
        } catch (Exception e) {
            LOG.error(" Error while connecting to DmDatabaseConnector.", e);
        }
        return obj;
    }

    @Bean("DataSourceTransactionManager")
    @Autowired
    public DataSourceTransactionManager dataSourceTransactionManager(
            @Qualifier("dmDataSource") DataSource eCustDatasource) {
        DataSourceTransactionManager txManager = new DataSourceTransactionManager();
        txManager.setDataSource(eCustDatasource);
        return txManager;
    }

    @Bean(name = { "csDataSource" })
    @ConfigurationProperties(prefix = "datasource.cs")
    public DataSource csDataSource() {
        return DataSourceBuilder.create().build();
    }

    @Bean(name = "csDao")
    public CsDatabaseConnector csDao() {
        CsDatabaseConnector obj = new CsDatabaseConnector();
        obj.setDataSource(csDataSource());
        ((JdbcTemplate) obj.getJdbcTemplate()).setFetchSize(propInt("Default.fetchSize", 200));
        try {
            obj.getJdbcTemplate().execute("select 1 from dual");
            LOG.info("csDatabaseConnector Database sucessfully connected. ");
        } catch (Exception e) {
            LOG.error(" Error while connecting to csDatabaseConnector.", e);
        }
        return obj;
    }

    @Autowired
    @Bean(name = "sessionFactory")
    public SessionFactory getSessionFactory() {

        LOG.info("Creating LocalSessionFactoryBean. ");

        // LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
     
        // data source to connect the particular db
        // sessionFactory.setDataSource(dmDataSource());

        // below is used for interceptor
        // sessionFactory.setEntityInterceptor(new AuditPropertiesInterceptor());

        // if we are using the files generated by hbm2java then use below
        // sessionFactory.setPackagesToScan("com.example.multiple.spring.rest.hibernate");

        // if are supplying the mapping files then use below
        // sessionFactory.setMappingResources("hibernate/AcceptedTerm.hbm.xml","hibernate/Contract.hbm.xml");
        // sessionFactory.setHibernateProperties(hibernateProperties());
        // return sessionFactory;

        LocalSessionFactoryBuilder sessionBuilder = new LocalSessionFactoryBuilder(csDataSource());
        sessionBuilder.addAnnotatedClasses(CustomerHDetails.class);
        sessionBuilder.addProperties(getHibernateProperties());
        return sessionBuilder.buildSessionFactory();
    }

    private Properties getHibernateProperties() {

        Properties properties = new Properties();
        properties.put("hibernate.show_sql", "true");
        // properties.put("hibernate.dialect", "org.hibernate.dialect.OracleDialect");
        properties.put("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");
        properties.put("hibernate.current_session_context_class", "thread");
        properties.put("hibernate.format_sql", "true");
        // properties.put("hibernate.hbm2ddl.auto", "create-drop");
        properties.put("hibernate.hbm2ddl.auto", "update");
        return properties;
    }

    @Bean("HibernateTransactionManager")
    @Autowired
    public HibernateTransactionManager transactionManager(SessionFactory s) {
        HibernateTransactionManager txManager = new HibernateTransactionManager();
        txManager.setSessionFactory(s);
        return txManager;
    }

    protected Integer propInt(String property, int defaultVal) {
        return toInteger(env.getProperty(property), defaultVal);
    }

    protected Integer toInteger(String val, int defaultVal) {
        if (this.isNull(val)) {
            return defaultVal;
        } else
            return toInteger(val);
    }

    protected Integer toInteger(String val) {
        return Integer.valueOf(val);
    }

    private boolean isNull(String str) {
        return !isNotNull(str);
    }

    private boolean isNotNull(String str) {
        return StringUtils.isNotBlank(str);
    }

}
